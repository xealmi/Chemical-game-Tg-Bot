from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery
from data.subloader import get_json, load_json
from keyboards import reply, inline
from datetime import datetime, timedelta
from scripts.scripts import case_roll, is_price_calc, ch_el_price_calc, lab_price_calc, income_calc

#=======================================================================================

router = Router()

#=======================================================================================

profile_photo = FSInputFile('data/images/profile.jpg')

#=======================================================================================

@router.message(F.text.casefold().in_(['üë§–ø—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def profile(message: Message):
    data = await get_json('data.json')
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        prem = (datetime.fromisoformat(user_data['premium']) - datetime.today()).days>0
        await message.answer_photo(
            photo=profile_photo,
            caption=
            f'üë§{message.from_user.full_name}\n'
            '-----------\n'
            f'‚öõ–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç: <b>{(await get_json('chemical_elements.json'))[str(user_data['chemical_element'])]['symbol']}</b>\n'
            f'üåü–û—Ç–∫—Ä—ã—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: <b>{user_data['chemical_element']}</b>\n'
            f'üí•–ë–∞–ª–∞–Ω—Å: <b>{user_data['balance']} –∫–î–∂</b>\n'
            f'–≠–Ω–µ—Ä–≥–æ–≤—ã—Ä–∞–±–æ—Ç–∫–∞: <b>{income_calc(user_data['chemical_element'], user_data['isotopes'], user_data['labs']) * (2 if prem else 1)} –∫–î–∂/–º–∏–Ω</b>\n'
            '-----------\n'
            f'üí≥Premium: {f'–¥–æ {user_data['premium'][:-7]}' if prem else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}',
            reply_markup=reply.menu_rkb
        )
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')


@router.message(F.text.casefold().in_(['üí°—Å–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é', '—ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é']))
async def collect_profit(message:Message):
    data = await get_json('data.json')
    
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        now = datetime.today()
        time = (now - datetime.fromisoformat(user_data['last_profit_collection'])).seconds//60
        prem = (datetime.fromisoformat(user_data['premium']) - now).days>0
        if time !=0:
            if prem:
                if time>480:
                    time =480
            else:
                if time>240:
                    time =240
            income = income_calc(user_data['chemical_element'], user_data['isotopes'], user_data['labs']) * time * (2 if prem else 1)
            user_data['balance'] += income
            user_data['last_profit_collection'] = str(now)
            await message.answer(text=f'üí•–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{income} –∫–î–∂</b> —ç–Ω–µ—Ä–≥–∏–∏')
            data[str(message.from_user.id)] = user_data
            load_json('data.json', data)
        else:
            await message.answer(text='–≠–Ω–µ—Ä–≥–∏—è –µ—â—ë –Ω–µ –≤—ã–¥–µ–ª–∏–ª–∞—Å—å!')
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')



@router.message(F.text.casefold().in_(['üéÅ–∫–µ–π—Å—ã', '–∫–µ–π—Å—ã']))
async def cases(message:Message):
    data = await get_json('data.json')
    
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        await message.answer(text=f'–í–∞—à–∏ –∫–µ–π—Å—ã:', reply_markup=inline.cases_kb(user_data['cases']))
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')



@router.callback_query(F.data.casefold().in_(['open_c_case','open_e_case','open_l_case','open_m_case']))
async def open_case(callback: CallbackQuery):
    data = await get_json('data.json')
    user_data = data[str(callback.from_user.id)]
    lvl = user_data['chemical_element']
    
    if callback.data == 'open_c_case':
        selected_case = 'common_case'
    elif callback.data == 'open_e_case':
        if lvl <3:
            selected_case = 0
            await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 3 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
        else:
            selected_case = 'epic_case'
    elif callback.data == 'open_l_case':
        if lvl <6:
            selected_case = 0
            await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 6 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
        else:
            selected_case = 'legendary_case'
    else:
        if lvl <9:
            selected_case = 0
            await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 9 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
        else:
            selected_case = 'mythical_case'
    
    if selected_case !=0:
        if user_data['cases'][selected_case] == 0:
            await callback.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞!')
        else:
            res = case_roll(selected_case)
            user_data['cases'][selected_case]-=1
            if isinstance(res, int):
                user_data['balance'] += res
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{res} –∫–î–∂</b>!')
            
            elif res == 'add_is':
                user_data['isotopes'] +=1
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ—Ç–æ–ø–∞</b>!')
            
            elif res == 'add_el':
                user_data['chemical_element']+=1
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</b>!')
            
            elif res== 'prem3d':
                today =datetime.today()
                if (datetime.fromisoformat(user_data['premium']) - today).days>0:
                    user_data['premium'] = str(datetime.fromisoformat(user_data['premium']) + timedelta(days=3))
                else:
                    user_data['premium'] = str(today + timedelta(days=3))
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>–ø—Ä–µ–º–∏—É–º –Ω–∞ 3 –¥–Ω—è</b>!ü§Ø')
            
            else:
                user_data['cases'][res] +=1
                if res =='common_case':
                    res = '–æ–±—ã—á–Ω—ã–π' 
                elif res =='epic_case':
                    res = '—ç–ø–∏—á–µ—Å–∫–∏–π' 
                elif res =='legendary_case':
                    res = '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' 
                else:
                    res = '–º–∏—Ñ–∏—á–µ—Å–∫–∏–π' 
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{res} –∫–µ–π—Å</b>!')
            
            await callback.message.edit_reply_markup(reply_markup=inline.cases_kb(user_data['cases']))
            data[str(callback.from_user.id)] = user_data
            load_json('data.json', data)



@router.message(F.text.casefold().in_(['üß™–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è']))
async def laboratory(message:Message):
    data= await get_json('data.json')
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        x = user_data['chemical_element']+1
        chem_el = (await get_json('chemical_elements.json'))[str(x)]
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inline.laboratory_kb(round(10*3.2**x), chem_el['name'], round(10*(1.63)**(user_data['isotopes']+1))))
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')


# –°–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ —Å–∞–º—ã–π —á–∏—Å—Ç—ã–π –∫–æ–¥ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏
@router.callback_query(F.data.casefold().in_(['buy_el', 'buy_is']))
async def laboratoey_buy(callback:CallbackQuery):
    if callback.data == 'buy_el':
        data = await get_json('data.json')
        user_data= data[str(callback.from_user.id)]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—É–¥–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        x =user_data['chemical_element']+1
        balance = user_data['balance']
        cost = ch_el_price_calc(x)
        new_balance = balance-cost
        
        if new_balance >=0:
            user_data['balance'] =new_balance
            chem_els = await get_json('chemical_elements.json')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∏–º. —ç–ª–∏–µ–Ω—Ç–∞ –≤ data.json
            user_data['chemical_element'] =x
            load_json('data.json', data)
            
            await callback.message.edit_reply_markup(
                reply_markup=inline.laboratory_kb(
                    ch_el_price_calc(x+1),
                    chem_els[str(x+1)]['name'],
                    is_price_calc(user_data['isotopes']+1)
                    )
                )
            await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {chem_els[str(user_data['chemical_element'])]['name']}!')
        else:
            await callback.answer(text='üò≠–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!')
    
    elif callback.data == 'buy_is':
        data = await get_json('data.json')
        
        user_data =data[str(callback.from_user.id)]
        x =user_data['isotopes']+1
        balance = user_data['balance']
        
        if balance>=is_price_calc(x):
            chem_els = await get_json('chemical_elements.json')
            if x<=chem_els[str(user_data['chemical_element'])]['isotopes']:
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ—Ç–æ–ø–∞ –≤ data.json
                user_data['balance'] =balance-is_price_calc(x)
                user_data['isotopes'] =x
                data[str(callback.from_user.id)] = user_data = user_data
                load_json('data.json', data)
                
                await callback.message.edit_reply_markup(
                    reply_markup=inline.laboratory_kb(
                        ch_el_price_calc(user_data['chemical_element']+1),
                        chem_els[str(user_data['chemical_element']+1)]['name'],
                        is_price_calc(x+1)
                        )
                    )
                await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –∏–∑–æ—Ç–æ–ø!')
            else:
                await callback.answer(text='–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç!')
        else:
            await callback.answer(text='üò≠–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!')




@router.message(F.text.casefold().in_(['üè™–º–∞–≥–∞–∑–∏–Ω', '–º–∞–≥–∞–∑–∏–Ω']))
async def shop(message:Message):
    data= await get_json('data.json')
    if str(message.from_user.id) in data:
        qua_lab= data[str(message.from_user.id)]['labs']
        await message.answer(text='–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?', reply_markup=inline.shop_kb(qua_lab))
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')

@router.callback_query(F.data.casefold().in_(['buy_case', 'buy_lab']))
async def shop_logic(callback: CallbackQuery):
    
    if callback.data == 'buy_case':
        await callback.message.edit_text(text='–ö–∞–∫–æ–π –∫–µ–π—Å –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?', reply_markup=inline.case_shop_kb())
    
    elif callback.data == 'buy_lab':
        data = await get_json('data.json')
        user_data = data[str(callback.from_user.id)]
        
        ch_el = user_data['chemical_element']
        labs = user_data['labs']
        if ch_el>3:
            if labs+1 <=ch_el:
                cost = lab_price_calc(labs)
                if user_data['balance']<cost:
                    await callback.answer(text='üò≠–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!')
                else:
                    user_data['balance']-=cost
                    user_data['labs']+=1
                    await callback.message.edit_reply_markup(reply_markup=inline.shop_kb(labs+1))
                    await callback.message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –Ω–∞–Ω—è–ª–∏ –ª–∞–±–æ—Ä–∞–Ω—Ç–∞! –í–∞—à –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 10%')
                    data[str(callback.from_user.id)] = user_data
                    load_json('data.json', data)
            else:
                await callback.answer(text='–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç!')
        else:
            await callback.answer(text='–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ë–µ—Ä–∏–ª–ª–∏–π!')

@router.callback_query(F.data[:-5].casefold().in_(['buy_common_case','buy_epic_case','buy_legendary_case','buy_mythical_case']))
async def buy_case(callback:CallbackQuery):
    case = callback.data[4:][:-5]
    
    data = await get_json('data.json')
    user_data = data[str(callback.from_user.id)]
    price = callback.data[-5:]
    price = int(price.replace('_', ''))
    if user_data['balance']>=price:
        user_data['balance']-=price
        user_data['cases'][case]+=1
        data[str(callback.from_user.id)] = user_data
        await callback.answer(text='üéÅ–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω')
        load_json('data.json', data)
    else:
        await callback.answer(text='üò≠–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!')