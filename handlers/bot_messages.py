from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery
from data.subloader import get_json, load_json
from keyboards import reply, inline
from datetime import datetime

#=======================================================================================

router = Router()

#=======================================================================================

profile_photo = FSInputFile('data/images/profile.jpg')

#=======================================================================================

@router.message(F.text.casefold().in_(['üë§–ø—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def profile(message: Message):
    data = await get_json('data.json')
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        await message.answer_photo(
            photo=profile_photo,
            caption=f'üë§{message.from_user.full_name}\n'
            '-----------\n'
            f'‚öõ–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç: <b>{(await get_json('chemical_elements.json'))[str(user_data['chemical_element'])]['symbol']}</b>\n'
            f'üåü–û—Ç–∫—Ä—ã—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: <b>{user_data['chemical_element']}</b>\n'
            f'üí•–ë–∞–ª–∞–Ω—Å: <b>{user_data['balance']} –∫–î–∂</b>',
            reply_markup=reply.menu_rkb
        )
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')


@router.message(F.text.casefold().in_(['üí°—Å–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é', '—ç–Ω–µ—Ä–≥–∏—è', '—Å–æ–±—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é']))
async def collect_profit(message:Message):
    data = await get_json('data.json')
    
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        now = datetime.today()
        time = (now - datetime.fromisoformat(user_data['last_profit_collection'])).seconds//60
        if time !=0:
            income = user_data['income_per_minute']*time
            user_data['balance'] += income
            user_data['last_profit_collection'] = str(now)
            await message.answer(text=f'üí•–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{income} –∫–î–∂</b> —ç–Ω–µ—Ä–≥–∏–∏')
            data[str(message.from_user.id)] = user_data
            load_json('data.json', data)
        else:
            await message.answer(text='–≠–Ω–µ—Ä–≥–∏—è –µ—â—ë –Ω–µ –≤—ã–¥–µ–ª–∏–ª–∞—Å—å!')
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')



@router.message(F.text.casefold().in_(['üéÅ–∫–µ–π—Å—ã', '–∫–µ–π—Å—ã']))
async def cases(message:Message):
    data = await get_json('data.json')
    
    if str(message.from_user.id) in data:
        user_data = data[str(message.from_user.id)]
        cases = user_data['cases']
        await message.answer(text=f'–í–∞—à–∏ –∫–µ–π—Å—ã:', reply_markup=inline.cases_kb(cases["common_case"], cases["epic_case"],cases["legendary_case"],cases["mythical_case"]))
    else:
        await message.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç')



# @router.callback_query(F.data.casefold().in_(['open_c_case','open_e_case','open_l_case','open_m_case']))
# async def open_case(callback: CallbackQuery):
#     data = await get_json('data.json')
#     user_data = data[str(callback.from_user.id)]
#     lvl = user_data['chemical_element']
    
#     if callback.data == 'open_c_case':
#         selected_case = 'common_case'
#     elif callback.data == 'open_e_case':
#         if lvl <3:
#             selected_case = 0
#             await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 3 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
#         else:
#             selected_case = 'epic_case'
#     elif callback.data == 'open_l_case':
#         if lvl <6:
#             selected_case = 0
#             await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 6 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
#         else:
#             selected_case = 'legendary_case'
#     else:
#         if lvl <9:
#             selected_case = 0
#             await callback.answer(text='–≠—Ç–æ—Ç –∫–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Å 9 —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞')
#         else:
#             selected_case = 'mythical_case'
    
#     if selected_case !=0:
#         if user_data['cases'][selected_case] == 0:
#             await callback.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞!')
#         else:



@router.message(F.text.casefold().in_(['üß™–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è']))
async def laboratory(message:Message):
    user_data = (await get_json('data.json'))[str(message.from_user.id)]
    x = user_data['chemical_element']+1
    chem_el = (await get_json('chemical_elements.json'))[str(x)]
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inline.laboratory_kb(round(10*(2.8)**x), chem_el['name']))



@router.callback_query(F.data.casefold().in_(['buy_el', 'lack_el']))
async def laboratoey_buy(callback:CallbackQuery):
    if callback.data == 'buy_el':
        data = await get_json('data.json')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—É–¥–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        x =data[str(callback.from_user.id)]['chemical_element']+1
        balance = data[str(callback.from_user.id)]['balance']
        cost = round(10*(2.8)**x)
        new_balance = balance-cost
        
        if new_balance >=0:
            data[str(callback.from_user.id)]['balance'] =new_balance
            chem_els = await get_json('chemical_elements.json')
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∏–º. —ç–ª–∏–µ–Ω—Ç–∞ –≤ data.json
            data[str(callback.from_user.id)]['chemical_element'] =x
            load_json('data.json', data)
            
            await callback.message.edit_reply_markup(
                reply_markup=inline.laboratory_kb(
                    round(10*(2.8)**(x+1)),
                    chem_els[str(x+1)]['name']
                    )
                )
            await callback.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {chem_els[str(data[str(callback.from_user.id)]['chemical_element'])]['name']}!')
        else:
            await callback.answer(text='üò≠–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!')